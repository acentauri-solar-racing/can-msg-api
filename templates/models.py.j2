from sqlalchemy import Integer, Float, Double
from sqlalchemy.orm import declarative_base, Mapped, mapped_column

Base = declarative_base()

{% for topic in topics %}
class {{helpers.conv_name_camel_case(topic.name)}}(Base):
    __tablename__ = "{{topic.name}}"
    id: Mapped[int] = mapped_column(primary_key=True)


    {%- for field in topic.data %}
    {{field}}: Mapped[{{type_lookup[topic["data"][field]["type"]]["py_t"]}}] = mapped_column({{type_lookup[topic["data"][field]["type"]]["pysql_t"]}}())
    {%- endfor %}
    timestamp: Mapped[float] = mapped_column(Double())

    def __init__(self, decoded_tuple, timestamp):
    {%- for field in topic.data %}
        self.{{field}} = {{type_lookup[topic["data"][field]["type"]]["py_t"]}}(decoded_tuple[{{loop.index - 1}}])
    {%- endfor %}
        self.timestamp = float(timestamp)

    def __repr__(self) -> str:
        return "%s(id=%s), ({%for f in topic.data -%}%s{{", " if not loop.last else ""}}{% endfor %}, %s)" % (
            "{{helpers.conv_name_camel_case(topic.name)}}",
            self.id,
            {%-for f in topic.data %}
            self.{{f}},
            {%- endfor %}
            self.timestamp
        )

{% endfor %}
ddl_models: dict = {
{%- for topic in topics %}
    {{helpers.conv_hex_str(topic.id)}}: {{helpers.conv_name_camel_case(topic.name)}},
{%- endfor %}
}